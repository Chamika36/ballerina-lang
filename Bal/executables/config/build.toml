[base_command]
name = "build"
short = "short description of build"

[help]
    [help.base]
    long = "long description of build"
    synopsis="bal build [OPTIONS] [<package>|<source-file>]"
    examples="""
	Build the current package. This will generate an 'app.jar' file in the
       'target/bin' directory.
           $ bal build

       Build a single '.bal' file. This will generate an 'app.jar' file in the
       current directory.
           $ bal build app.bal

       Build the 'app' package from a different directory.
           $ bal build <app-package-path>

       Build the package with additional GraalVM native image options.
           $ bal build --graalvm --graalvm-build-options="--static -H:Name=hello-world"
	"""
    options="""--export-openapi
           Generate OpenAPI definitions for service declarations in the current
           package.

       --cloud <provider>
           Generate cloud artifacts: '--cloud=k8s' for Kubernetes
           and '--cloud=docker' for Docker.

       --list-conflicted-classes
           List the conflicting classes of conflicting JARs in the package.

       -o <output>, --output <output>
           Write the output to the given file. These options will only work
           for the single '.bal' file scenario.

       --observability-included
           Include the dependencies that are required to enable observability.

       --offline
           Proceed without accessing the network. Attempt to proceed with the
           previously downloaded dependencies in local caches, will fail
           otherwise.

       --sticky
       	   Attempt to stick to the dependency versions available in the
       	   'Dependencies.toml' file. If the file doesn't exist, this option is
       	   ignored.

       --target-dir <path>
           Target directory path.

       --graalvm
           Generate a GraalVM native image. Native image generation is an
           experimental feature which supports only a limited set of
           functionality.

       --graalvm-build-options
           Additional build options to be passed to the GraalVM native image.

       --remote-management
           Include the dependencies that are required to enable remote package
           management service.

       --show-dependency-diagnostics
           Print the diagnostics that are related to the dependencies. By default, these
           diagnostics are not printed to the console.
"""

[[base_command.flag]]
name = "output"
shorthand = "o"
default_val = ""
usage = "Write the output to the given file."
param="output"

[[base_command.flag]]
name = "offline"
default_val = false
usage = "Run in offline mode"

[[base_command.flag]]
name = "observability-included"
default_val = false
usage = "Run with including observability"

[[base_command.flag]]
name = "sticky"
default_val = false
usage = "Run with including sticky"

[[base_command.flag]]
name = "target-dir"
default_val = ""
usage = "Specify the target directory"
param="target-dir"

[[base_command.flag]]
name = "export-openapi"
default_val = false
usage = "Export OpenAPI specification"

[[base_command.flag]]
name = "list-conflicted-classes"
default_val = false
usage = "List conflicted classes"

[[base_command.flag]]
name = "graalvm"
default_val = false
usage = "Use GraalVM"

[[base_command.flag]]
name = "graalvm-build-options"
default_val = ""
usage = "Specify GraalVM build options"

[[base_command.flag]]
name = "cloud"
default_val = ""
usage = "Specify the cloud provider"
param="provider"
